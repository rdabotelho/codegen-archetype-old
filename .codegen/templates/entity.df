template {
	sourceFile: 'entity.ts'
	targetFile: 'src/entity/${domain.name}.ts'
	scope: 'entity'
	block(4, 4) {
		showIf(domain.attributes.contains, 'basic', 'true')
	}
	block(5, 6) {
		showIf(domain.attributes.contains, 'oneToOne', 'true')
	}
	block(7, 7) {
		showIf(domain.attributes.contains, 'oneToMany', 'true')
	}
	block(8, 8) {
		showIf(domain.attributes.contains, 'manyToOne', 'true')
	}
	block(9, 9) {
		showIf(domain.attributes.contains, 'manyToMany', 'true')
	}
	block(12, 12) {
		iterate(domain.attributes, item) {
			showIf(item.typeDomain.entity.equals, 'true')
			replace('OtherDomain', item.typeDomain.name)
		}
	}
	block(13, 13) {
		iterate(domain.attributes, item) {
			showIf(item.typeDomain.enum.equals, 'true')
			replace('EnumName', item.typeDomain.name)
		}
	}
	block(15, 16) {
		replace('domain_name', domain.name.snakeLowerCase)		
		replace('DomainName', domain.name)
	}
	block(18, 18) {
		replace('domain_name', domain.name.snakeLowerCase)		
	}

	block(20, 35) {
		iterate(domain.attributes, item) {
			block(20, 22) {
				showIf(item.basic.equals, 'true')
				replace('column_name', item.name.snakeLowerCase)
				replace('attributeName', item.name)
				replace('string', item.type)
				replaceIf('\/\* column_length \*\/', item.length, item.length.notEquals, '', '') {
					mask(', length:%s')
				}
				replaceIf('\/\* column_required \*\/', ', nullable:false', item.required.equals, 'true', '')
				replace('\/\* column_enum \*\/', '')
			}
			block(20, 22) {
				showIf(item.enum.equals, 'true')
				replace('column_name', item.name.snakeLowerCase)
				replace('attributeName', item.name)
				replace('string', item.type)
				replaceIf('\/\* column_length \*\/', item.length, item.length.notEquals, '', '') {
					mask(', length:%s')
				}
				replaceIf('\/\* column_required \*\/', ', nullable:false', item.required.equals, 'true', '')
				replace('\/\* column_enum \*\/', item.type) {
					mask(', type: "enum", enum: %s')
				}
			}
			block(23, 26) {
				showIf(item.oneToOne.equals, 'true')
				replace('attributeName', item.name)
				replace('OtherDomain', item.type)
				replace('TypeDomain', item.typeDomain.name)
			}
			block(27, 29) {
				showIf(item.oneToMany.equals, 'true')
				replace('attributeName', item.name)
				replace('OtherDomain', item.typeDomain.name)
				replace('TypeDomain', item.typeDomain.name)
				replace('typeDomain', item.typeDomain.name.camelCase)
				replace('domain', domain.name.camelCase)
			}
			block(30, 32) {
				showIf(item.manyToOne, 'true')
				replace('attributeName', item.name)
				replace('OtherDomain', item.typeDomain.name)
				replace('TypeDomain', item.typeDomain.name)
				replace('typeDomain', item.typeDomain.name.camelCase)
				replace('domains', domain.name.camelCase) {
					mask('%ss')
				}
			}
			block(33, 35) {
				showIf(item.manyToMany, 'true')
				replace('attributeName', item.name)
				replace('OtherDomain', item.typeDomain.name)
				replace('TypeDomain', item.typeDomain.name)
				replace('typeDomain', item.typeDomain.name.camelCase)
				replace('domains', domain.name.camelCase) {
					mask('%ss')
				}
			}
		}
	}
}
